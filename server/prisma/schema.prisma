datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Device {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String?
  identifier         String               @unique
  location           Location             @relation(fields: [locationId], references: [id])
  locationId         Int
  category           Category             @relation(fields: [categoryId], references: [id], onDelete: SetDefault)
  categoryId         Int                  @default(1)
  SpecialMaintenance SpecialMaintenance[]
}

model Location {
  id         Int      @id @default(autoincrement())
  name       String
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId Int
  Device     Device[]
}

model Building {
  id       Int        @id @default(autoincrement())
  name     String
  Location Location[]
}

model Category {
  id          Int                   @id @default(autoincrement())
  name        String
  Device      Device[]
  Maintenance ScheduledMaintenance?
  children    Category[]            @relation("ChildParent")
  parent      Category?             @relation("ChildParent", fields: [parentId], references: [id], onDelete: SetNull)
  parentId    Int?
}

model Period {
  id          Int                    @id @default(autoincrement())
  name        String
  days        Int
  Maintenance ScheduledMaintenance[]
}

model ScheduledMaintenance {
  id                       Int                                 @id @default(autoincrement())
  name                     String
  normaInMinutes           Int
  lastMaintenance          DateTime?
  periodId                 Int?
  period                   Period?                             @relation(fields: [periodId], references: [id], onDelete: SetNull)
  categoryId               Int                                 @unique @default(1)
  category                 Category                            @relation(fields: [categoryId], references: [id], onDelete: SetDefault)
  MaintenanceQualification ScheduledMaintenanceQualification[]
  Instruction              Instruction[]
  Tasks                    Tasks[]
}

model SpecialMaintenance {
  id                       Int                               @id @default(autoincrement())
  name                     String
  normaInMinutes           Int
  malfunctionDate          DateTime
  deviceId                 Int                               @unique @default(1)
  device                   Device                            @relation(fields: [deviceId], references: [id], onDelete: SetDefault)
  MaintenanceQualification SpecialMaintenanceQualification[]
  Instruction              Instruction[]
  Tasks                    Tasks[]
}

model Instruction {
  id                     Int                   @id @default(autoincrement())
  title                  String
  body                   String?
  done                   Boolean               @default(false)
  scheduledMaintenance   ScheduledMaintenance? @relation(fields: [scheduledMaintenanceId], references: [id], onDelete: Cascade)
  scheduledMaintenanceId Int?
  specialMaintenance     SpecialMaintenance?   @relation(fields: [specialMaintenanceId], references: [id], onDelete: Cascade)
  specialMaintenanceId   Int?
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  username          String
  password          String
  Role              Role                @relation(fields: [roleId], references: [id])
  roleId            Int
  active            Boolean
  UserQualification UserQualification[]
  Tasks             Tasks[]

}

model Qualification {
  id                                Int                                 @id @default(autoincrement())
  name                              String
  UserQualification                 UserQualification[]
  ScheduledMaintenanceQualification ScheduledMaintenanceQualification[]
  SpecialMaintenanceQualification   SpecialMaintenanceQualification[]
}

model UserQualification {
  qualification   Qualification @relation(fields: [qualificationId], references: [id], onDelete: Cascade)
  qualificationId Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int

  @@id([qualificationId, userId])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model ScheduledMaintenanceQualification {
  qualification   Qualification        @relation(fields: [qualificationId], references: [id], onDelete: Cascade)
  qualificationId Int
  maintenance     ScheduledMaintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  maintenanceId   Int

  @@id([qualificationId, maintenanceId])
}

model SpecialMaintenanceQualification {
  qualification   Qualification      @relation(fields: [qualificationId], references: [id], onDelete: Cascade)
  qualificationId Int
  maintenance     SpecialMaintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  maintenanceId   Int

  @@id([qualificationId, maintenanceId])
}

model Tasks {
  id                     Int                  @id @default(autoincrement())
  scheduledMaintenanceId Int?
  scheduledMaintenance   ScheduledMaintenance? @relation(fields: [scheduledMaintenanceId], references: [id], onDelete: Cascade)
  specialMaintenanceId   Int?
  specialMaintenance     SpecialMaintenance?   @relation(fields: [specialMaintenanceId], references: [id], onDelete: Cascade)
  userId                 Int?
  user                   User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  description            String?
  assignedAt             DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  acceptedAt             DateTime?
  declinedAt             DateTime?
  startedAt              DateTime?
  finishedAt             DateTime?
  priorityId             Int                  @default(3)
  priority               Priority             @relation(fields: [priorityId], references: [id])
  statusId               Int
  status                 Status               @relation(fields: [statusId], references: [id])
}

model Priority {
  id       Int     @id @default(autoincrement())
  name     String
  priority Int
  Tasks    Tasks[]
}

model Status {
  id    Int     @id @default(autoincrement())
  name  String
  Tasks Tasks[]
}
