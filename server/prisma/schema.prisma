datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Device {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  identifier  String   @unique
  location    Location @relation(fields: [locationId], references: [id])
  locationId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
}

model Location {
  id         Int      @id @default(autoincrement())
  name       String
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId Int
  Device     Device[]
}

model Building {
  id       Int        @id @default(autoincrement())
  name     String
  Location Location[]
}

model Category {
  id              Int           @id @default(autoincrement())
  name            String
  normaInMinutes  Int?
  lastMaintenance DateTime?
  Device          Device[]
  Maintenance     Maintenance[]
  period          Period?       @relation(fields: [periodId], references: [id])
  periodId        Int?
  children        Category[]    @relation("ChildParent")
  parent          Category?     @relation("ChildParent", fields: [parentId], references: [id])
  parentId        Int?
}

model Period {
  id       Int        @id @default(autoincrement())
  name     String
  days     Int
  Category Category[]
}

model Maintenance {
  id                       Int                        @id @default(autoincrement())
  name                     String
  Instruction              Instruction[]
  exceptive                Boolean                    @default(false)
  categoryId               Int
  category                 Category                   @relation(fields: [categoryId], references: [id])
  MaintenanceQualification MaintenanceQualification[]
  MaintenanceUser          MaintenanceUser[]
}

model Instruction {
  id            Int         @id @default(autoincrement())
  title         String?
  body          String
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id])
  maintenanceId Int
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  username          String
  password          String
  Role              Role                @relation(fields: [roleId], references: [id])
  roleId            Int
  UserQualification UserQualification[]
  MaintenanceUser   MaintenanceUser[]

}

model Qualification {
  id                       Int                        @id @default(autoincrement())
  name                     String
  UserQualification        UserQualification[]
  MaintenanceQualification MaintenanceQualification[]
}

model UserQualification {
  qualification   Qualification @relation(fields: [qualificationId], references: [id])
  qualificationId Int
  user            User          @relation(fields: [userId], references: [id])
  userId          Int

  @@id([qualificationId, userId])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model MaintenanceQualification {
  qualification   Qualification @relation(fields: [qualificationId], references: [id])
  qualificationId Int
  maintenance     Maintenance   @relation(fields: [maintenanceId], references: [id])
  maintenanceId   Int

  @@id([qualificationId, maintenanceId])
}

model MaintenanceUser {
  maintenanceId Int
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id])
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  assignedAt    DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  acceptedAt    DateTime?
  declinedAt    DateTime?
  startedAt     DateTime?
  finishedAt    DateTime?
  statusId      Int
  status        Status      @relation(fields: [statusId], references: [id])

  @@id([userId, maintenanceId])
}

model Status {
  id              Int               @id @default(autoincrement())
  name            String
  MaintenanceUser MaintenanceUser[]
}
