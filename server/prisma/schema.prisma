datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Device {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  identifier  String   @unique
  location    Location @relation(fields: [locationId], references: [id])
  locationId  Int
  category    Category @relation(fields: [categoryId], references: [id], onDelete: SetDefault)
  categoryId  Int      @default(1)
}

model Location {
  id         Int      @id @default(autoincrement())
  name       String
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId Int
  Device     Device[]
}

model Building {
  id       Int        @id @default(autoincrement())
  name     String
  Location Location[]
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String
  Device      Device[]
  Maintenance Maintenance?
  children    Category[]   @relation("ChildParent")
  parent      Category?    @relation("ChildParent", fields: [parentId], references: [id], onDelete: SetNull)
  parentId    Int?
}

model Period {
  id          Int           @id @default(autoincrement())
  name        String
  days        Int
  Maintenance Maintenance[]
}

model Maintenance {
  id                       Int                        @id @default(autoincrement())
  name                     String
  Instruction              Instruction[]
  exceptive                Boolean                    @default(false)
  normaInMinutes           Int
  lastMaintenanceId        Int?                       @unique
  lastMaintenance          Tasks?                     @relation(name: "LastTask", fields: [lastMaintenanceId], references: [id])
  period                   Period?                    @relation(fields: [periodId], references: [id], onDelete: SetNull)
  periodId                 Int?
  categoryId               Int                        @unique @default(1)
  category                 Category                   @relation(fields: [categoryId], references: [id], onDelete: SetDefault)
  MaintenanceQualification MaintenanceQualification[]
  Tasks                    Tasks[]
}

model Instruction {
  id            Int         @id @default(autoincrement())
  title         String
  body          String?
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  maintenanceId Int
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  username          String
  password          String
  Role              Role                @relation(fields: [roleId], references: [id])
  roleId            Int
  UserQualification UserQualification[]
  Tasks             Tasks[]

}

model Qualification {
  id                       Int                        @id @default(autoincrement())
  name                     String
  UserQualification        UserQualification[]
  MaintenanceQualification MaintenanceQualification[]
}

model UserQualification {
  qualification   Qualification @relation(fields: [qualificationId], references: [id], onDelete: SetNull)
  qualificationId Int
  user            User          @relation(fields: [userId], references: [id])
  userId          Int

  @@id([qualificationId, userId])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model MaintenanceQualification {
  qualification   Qualification @relation(fields: [qualificationId], references: [id], onDelete: Cascade)
  qualificationId Int
  maintenance     Maintenance   @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  maintenanceId   Int

  @@id([qualificationId, maintenanceId])
}

model Tasks {
  id            Int          @id @default(autoincrement())
  maintenanceId Int
  maintenance   Maintenance  @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  userId        Int
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt    DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  scheduled     DateTime     @default(now())
  acceptedAt    DateTime?
  declinedAt    DateTime?
  startedAt     DateTime?
  finishedAt    DateTime?
  priorityId    Int          
  priority      Priority     @relation(fields: [priorityId], references: [id])
  statusId      Int
  status        Status       @relation(fields: [statusId], references: [id])
  lastTask      Maintenance? @relation("LastTask")
}

model Priority {
  id       Int     @id @default(autoincrement())
  name     String
  priority Int
  Tasks    Tasks[]
}

model Status {
  id    Int     @id @default(autoincrement())
  name  String
  Tasks Tasks[]
}
