datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Device {
  id           Int           @id @default(autoincrement())
  name         String
  description String
  identifier String
  location Location @relation(fields: [locationId], references: [id])
  locationId Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Location{
  id           Int           @id @default(autoincrement())
  name String
  building Building @relation(fields: [buildingId], references: [id])
  buildingId Int
  devices Device[]
}

model Building{
  id           Int           @id @default(autoincrement())
  name String
  locations Location[]
}

model Category{
  id           Int           @id @default(autoincrement())
  name String
  normaInMinutes Int
  lastMaintenance DateTime
  devices Device[]
  maintenances Maintenance[]
  period Period  @relation(fields: [periodId], references: [id])
  periodId Int
  children Category[] @relation("ChildParent")
  parent Category @relation("ChildParent", fields: [parentId], references: [id])
  parentId Int
}

model Period{
  id           Int           @id @default(autoincrement())
  name String
  days Int
  categories Category[]
}

model Maintenance {
  id                       Int                        @id @default(autoincrement())
  name                     String
  instructions             Instruction[]
  device                   Device                     @relation(fields: [deviceId], references: [id])
  deviceId                 Int
  exceptive                Boolean                    @default(false)
  last                     DateTime
  normaInMinutes           Int                        @default(60)
  periodInDays             Decimal
  assignedAt               DateTime                   @default(now())
  userId                   Int
  user                     User                       @relation(fields: [userId], references: [id])
  maintenanceQualification MaintenanceQualification[]
}

model Instruction {
  id            Int         @id @default(autoincrement())
  title         String?
  body          String
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id])
  maintenanceId Int

}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  username          String
  password          String
  Role              Role                @relation(fields: [roleId], references: [id])
  roleId            Int
  userQualifications UserQualification[]
  maintenanceUsers MaintenanceUsers[]
  
}

model Qualification {
  id                       Int                        @id @default(autoincrement())
  name                     String
  userQualification        UserQualification[]
  MaintenanceQualification MaintenanceQualification[]
}

model UserQualification {
  qualification   Qualification @relation(fields: [qualificationId], references: [id])
  qualificationId Int
  user            User          @relation(fields: [userId], references: [id])
  userId          Int

  @@id([qualificationId, userId])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}



model MaintenanceQualification {
  qualification   Qualification @relation(fields: [qualificationId], references: [id])
  qualificationId Int
  maintenance     Maintenance   @relation(fields: [maintenanceId], references: [id])
  maintenanceId   Int

  @@id([qualificationId, maintenanceId])
}
