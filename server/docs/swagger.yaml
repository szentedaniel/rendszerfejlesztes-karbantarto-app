openapi: '3.0.2'
info:
  title: Rendszerfejlesztes API
  version: '1.0'
servers:
  - url: http://localhost:3000/api

components:
    schemas:
      # Device schema
      Device:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          maintenances:
            type: array
            items:
              $ref: '#/components/schemas/Maintenance'
      # Maintenance schema
      Maintenance:
        type: object
        properties:
            id: 
              type: integer
              default: Auto-generated
            name: 
              type: string
            instructions:
              type: array
              items:
                $ref: '#/components/schemas/Instruction'
            device:
              $ref: '#/components/schemas/Device'
            deviceId: 
              type: integer
            exceptive: 
              type: boolean
              default: false
            last:
              type: string
            normaInMinutes:
              type: integer
              default: 60
            periodInDays:
              type: number
            assignedAt:
              type: string
              default: Auto-generated
            userId:
              type: integer
            user:
              $ref: '#/components/schemas/User'
      # Instruction schema
      Instruction:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          title:
            type: string
          body:
            type: string
          maintenance:
            $ref: '#/components/schemas/Maintenance'
          maintenanceId:
            type: integer
      # User schema
      User:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          createdAt:
            type: string
            format: date-time
            default: Auto-generated   
          updatedAt:
            type: string
            format: date-time
            default: Auto-generated      
          name:
            type: string
          username:
            type: string
          password:
            type: string
            format: password
          UserRole:
            type: array
            items:
              $ref: '#/components/schemas/UserRole'
          Maintenance:
            type: array
            items:
              $ref: '#/components/schemas/Maintenance'
      # Role schema
      Role:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          UserRole:
            type: array
            items:
              $ref: '#/components/schemas/UserRole'
      # UserRole schema
      UserRole:
        type: object
        properties:
          role:
            $ref: '#/components/schemas/Role'
          roleId:
            type: integer
          user:
            $ref: '#/components/schemas/User'
          userId:
            type: integer
#      Post:
#        type: object
#        required:
#          - userId
#          - title
#          - body
#        properties:
#          id:
#            type: integer
#          userId:
#            type: integer
#          title:
#            type: string
#          body:
#            type: string
#        example:
#          id: 1
#          userId: 1
#          title: my title
#          body: my article
paths:
  /users:
    get:
      summary: Returns all users
      tags: [Users]
      responses:
        200:
          description: the list of the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'



  /users/{id}:
    get:
      summary: Returns a user by id
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by id
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The user was successfully deleted and the data of the deleted user is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: The user could not be deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    default: 500
                  message:
                    type: string
                    default: Error message
    patch:
      summary: Update a user by id
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/User'
            examples:    
              Example1:   
                value:
                  username: New username
              Example2:   
                value:
                  name: New name
                  username: New username
              Example3:   
                value:
                  name: New name
                  username: New username
                  password: New password
      responses:
        200:
          description: The user was successfully updated and the data of the updated user is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: The user could not be updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    default: 500
                  message:
                    type: string
                    default: Error message



  /user:
    post:
      summary: Adds a new user
      tags: [Users]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/User'   
            examples:    
              Jessica:   
                value:
                  name: Jessica Smith
                  username: jessica_s
                  password: passw1234
              Ron:       
                value:
                  name: Ron Stewart
                  username: ron_s
                  password: secret987
      responses:
        200:
          description: The user was successfully created and the data of the created user is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: The user could not be created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    default: 500
                  message:
                    type: string
                    default: Error message
