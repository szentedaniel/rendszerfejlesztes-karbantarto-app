openapi: '3.0.2'
info:
  title: Rendszerfejlesztes API
  version: '1.0'
servers:
  - url: http://localhost:3000/api

components:
    schemas:
      # Device schema
      Device:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          description:
            type: string
          identifier:
            type: string
          location:
            $ref: '#/components/schemas/Location'
          locationId:
            type: integer
          category:
            $ref: '#/components/schemas/Category'
          categoryId:
            type: integer
      # Location schema
      Location:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          building:
            $ref: '#/components/schemas/Building'
          buildingId: 
            type: integer
          Device:
            type: array
            items:
              $ref: '#/components/schemas/Device'
      # Building schema
      Building:
        type: object
        properties:
          id: 
            type: integer
            default: Auto-generated
          name: 
            type: string
          Location:
            type: array
            items:
              $ref: '#/components/schemas/Location'
      # Category schema
      Category:
        type: object
        properties:
          id: 
            type: integer
            default: Auto-generated
          name: 
            type: string
          normaInMinutes:
            type: integer
          lastMaintenance:
            type: string
            format: date-time
            nullable: true
          Device:
            type: array
            items:
              $ref: '#/components/schemas/Device'
          Maintenance:
            type: array
            items:
              $ref: '#/components/schemas/Maintenance'
          period:
            $ref: '#/components/schemas/Period'
          periodId:
            type: integer
          children:
            type: array
            items:
              $ref: '#/components/schemas/Category'
          parent:
            $ref: '#/components/schemas/Category'
            nullable: true
          parentId:
            type: integer
            nullable: true
      # Period schema
      Period:
        type: object
        properties:
          id: 
            type: integer
            default: Auto-generated
          name: 
            type: string
          days:
            type: integer
          Category:
            type: array
            items:
              $ref: '#/components/schemas/Category'
      # Maintenance schema
      Maintenance:
        type: object
        properties:
            id: 
              type: integer
              default: Auto-generated
            name: 
              type: string
            Instruction:
              type: array
              items:
                $ref: '#/components/schemas/Instruction'
            exceptive: 
              type: boolean
              default: false
            categoryId: 
              type: integer
            category:
              $ref: '#/components/schemas/Category'
            MaintenanceQualification:
              type: array
              items:
                $ref: '#/components/schemas/MaintenanceQualification'
            MaintenanceUser:
              type: array
              items:
                $ref: '#/components/schemas/MaintenanceUser'
      # Instruction schema
      Instruction:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          title:
            type: string
            nullable: true
          body:
            type: string
          maintenance:
            $ref: '#/components/schemas/Maintenance'
          maintenanceId:
            type: integer
      # User schema
      User:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          createdAt:
            type: string
            format: date-time
            default: Auto-generated   
          updatedAt:
            type: string
            format: date-time
            default: Auto-generated      
          username:
            type: string
          password:
            type: string
            format: password
          Role:
            $ref: '#/components/schemas/Role'
          roleId:
            type: integer
          UserQualification:
            type: array
            items:
              $ref: '#/components/schemas/UserQualification'
          MaintenanceUser:
            type: array
            items:
              $ref: '#/components/schemas/MaintenanceUser'
      # Qualification schema
      Qualification:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          UserQualification:
            type: array
            items:
              $ref: '#/components/schemas/UserQualification'
          MaintenanceQualification:
            type: array
            items:
              $ref: '#/components/schemas/MaintenanceQualification'
      # UserQualification schema
      UserQualification:
        type: object
        properties:
          qualification:
            $ref: '#/components/schemas/Qualification'
          qualificationId:
            type: integer
          user:
            $ref: '#/components/schemas/User'
          userId:
            type: integer
      # Role schema
      Role:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          User:
            type: array
            items:
              $ref: '#/components/schemas/User'
      # MaintenanceQualification schema
      MaintenanceQualification:
        type: object
        properties:
          qualification:
            $ref: '#/components/schemas/Qualification'
          qualificationId:
            type: integer
          maintenance:
            $ref: '#/components/schemas/Maintenance'
          maintenanceId:
            type: integer
      # MaintenanceUser schema
      MaintenanceUser:
        type: object
        properties:
          maintenanceId:
            type: integer
          maintenance:
            $ref: '#/components/schemas/Maintenance'
          userId:
            type: integer
          user:
            $ref: '#/components/schemas/User'
          assignedAt:
            type: string
            format: date-time
            default: Auto-generated
          updatedAt:
            type: string
            format: date-time #updatedAt is missing!
            default: Auto-generated
          acceptedAt:
            type: string
            format: date-time
            nullable: true
          declinedAt:
            type: string
            format: date-time
            nullable: true
          startedAt:
            type: string
            format: date-time
            nullable: true
          finishedAt:
            type: string
            format: date-time
            nullable: true
          statusId:
            type: integer
          status:
            $ref: '#/components/schemas/Status'
      # Status schema
      Status:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          MaintenanceUser:
            type: array
            items:
              $ref: '#/components/schemas/MaintenanceUser'
      Login:
        type: object
        properties:
          username:
            type: string
            nullable: false
          password:
            type: string
            nullable: false
#      Post:
#        type: object
#        required:
#          - userId
#          - title
#          - body
#        properties:
#          id:
#            type: integer
#          userId:
#            type: integer
#          title:
#            type: string
#          body:
#            type: string
#        example:
#          id: 1
#          userId: 1
#          title: my title
#          body: my article
paths:
  /users:
    get:
      summary: Returns all users
      tags: [Users]
      responses:
        200:
          description: the list of the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'



  /users/{id}:
    get:
      summary: Returns a user by id
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by id
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The user was successfully deleted and the data of the deleted user is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: The user could not be deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    default: 500
                  message:
                    type: string
                    default: Error message
    patch:
      summary: Update a user by id
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/User'
            examples:    
              Example1:   
                value:
                  username: New username
              Example2:   
                value:
                  name: New name
                  username: New username
              Example3:   
                value:
                  name: New name
                  username: New username
                  password: New password
              Example4:   
                value:
                  name: New name
                  username: New username
                  password: New password
                  userId: 1
      responses:
        200:
          description: The user was successfully updated and the data of the updated user is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: The user could not be updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    default: 500
                  message:
                    type: string
                    default: Error message



  /user:
    post:
      summary: Adds a new user
      tags: [Users]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/User'   
            examples:    
              Jessica:   
                value:
                  name: Jessica Smith
                  username: jessica_s
                  password: passw1234
                  roleId: 1
              Ron:       
                value:
                  name: Ron Stewart
                  username: ron_s
                  password: secret987
                  roleId: 1
      responses:
        200:
          description: The user was successfully created and the data of the created user is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: The user could not be created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    default: 500
                  message:
                    type: string
                    default: Error message
  /login:
    post:
      summary: Login
      tags: [Users]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Login'   
            examples:    
              Working example:   
                value:
                  username: admin
                  password: admin
              Bad password:       
                value:
                  username: admin
                  password: password
              Not found example:
                value:
                  username: pityu
                  password: notapassword
      responses:
        '200':
          description: Successfully logged in
        404:
          description: Not found
        401:
          description: Wrong password
  
  /qualifications:
    get:
      summary: Returns all qualifications
      tags: [Qualifications]
      responses:
        200:
          description: the list of the qualifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Qualification'