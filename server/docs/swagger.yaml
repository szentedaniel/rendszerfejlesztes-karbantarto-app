openapi: '3.0.2'
info:
  title: Rendszerfejlesztes API
  version: '1.0'
servers:
  - url: http://localhost:8000/api

components:
    schemas:
      # Device schema
      Device:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          description:
            type: string
            nullable: true
          identifier:
            type: string
          location:
            $ref: '#/components/schemas/Location'
          locationId:
            type: integer
          category:
            $ref: '#/components/schemas/Category'
          categoryId:
            type: integer
          SpecialMaintenance:
            type: array
            items:
              $ref: '#/components/schemas/SpecialMaintenance'
      # Location schema
      Location:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          building:
            $ref: '#/components/schemas/Building'
          buildingId: 
            type: integer
          Device:
            type: array
            items:
              $ref: '#/components/schemas/Device'
      # Building schema
      Building:
        type: object
        properties:
          id: 
            type: integer
            default: Auto-generated
          name: 
            type: string
          Location:
            type: array
            items:
              $ref: '#/components/schemas/Location'
      # Category schema
      Category:
        type: object
        properties:
          id: 
            type: integer
            default: Auto-generated
          name: 
            type: string
          Device:
            type: array
            items:
              $ref: '#/components/schemas/Device'
          Maintenance:
            type: array
            items:
              $ref: '#/components/schemas/ScheduledMaintenance'
          children:
            type: array
            items:
              $ref: '#/components/schemas/Category'
          parent:
            $ref: '#/components/schemas/Category'
            nullable: true
          parentId:
            type: integer
            nullable: true
      # Period schema
      Period:
        type: object
        properties:
          id: 
            type: integer
            default: Auto-generated
          name: 
            type: string
          periodInDays:
            type: integer
          Maintenance:
            type: array
            items:
              $ref: '#/components/schemas/ScheduledMaintenance'
      # ScheduledMaintenance schema
      ScheduledMaintenance:
        type: object
        properties:
            id: 
              type: integer
              default: Auto-generated
            name: 
              type: string
            normaInMinutes:
              type: integer
            lastMaintenance: 
              type: string
              format: date-time
              nullable: true
            periodId:
              type: integer
            period:
              $ref: '#/components/schemas/Period'
            categoryId: 
              type: integer
              default: 1
            category:
              $ref: '#/components/schemas/Category'
            priorityId:
              type: integer
            priority:
              $ref: '#/components/schemas/Priority'
            MaintenanceQualification:
              type: array
              items:
                $ref: '#/components/schemas/ScheduledMaintenanceQualification'
            Instruction:
              type: array
              items:
                $ref: '#/components/schemas/Instruction'
            Task:
              type: array
              items:
                $ref: '#/components/schemas/Task'
      # SpecialMaintenance schema
      SpecialMaintenance:
        type: object
        properties:
          id: 
            type: integer
            default: Auto-generated
          name: 
            type: string
          description:
            type: string
            nullable: true
          normaInMinutes:
            type: integer
          malfunctionDate: 
            type: string
            format: date-time
            default: Auto-generated
          deviceId: 
            type: integer
          device:
            $ref: '#/components/schemas/Device'
          priorityId:
            type: integer
          priority:
            $ref: '#/components/schemas/Priority'
          MaintenanceQualification:
            type: array
            items:
              $ref: '#/components/schemas/SpecialMaintenanceQualification'
          Instruction:
            type: array
            items:
              $ref: '#/components/schemas/Instruction'
          Task:
            type: array
            items:
              $ref: '#/components/schemas/Task'
      # Instruction schema
      Instruction:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          title:
            type: string
          body:
            type: string
            nullable: true
          scheduledMaintenance:
            $ref: '#/components/schemas/ScheduledMaintenance'
            nullable: true
          scheduledMaintenanceId:
            type: integer
            nullable: true
          specialMaintenance:
            $ref: '#/components/schemas/SpecialMaintenance'
            nullable: true
          specialMaintenanceId:
            type: integer
            nullable: true
      # User schema
      User:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          createdAt:
            type: string
            format: date-time
            default: Auto-generated   
          updatedAt:
            type: string
            format: date-time
            default: Auto-generated      
          username:
            type: string
          password:
            type: string
            format: password
          Role:
            $ref: '#/components/schemas/Role'
          roleId:
            type: integer
          active:
            type: boolean
          UserQualification:
            type: array
            items:
              $ref: '#/components/schemas/UserQualification'
          Task:
            type: array
            items:
              $ref: '#/components/schemas/Task'
      # Qualification schema
      Qualification:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          UserQualification:
            type: array
            items:
              $ref: '#/components/schemas/UserQualification'
          ScheduledMaintenanceQualification:
            type: array
            items:
              $ref: '#/components/schemas/ScheduledMaintenanceQualification'
          SpecialMaintenanceQualification:
            type: array
            items:
              $ref: '#/components/schemas/SpecialMaintenanceQualification'
      # UserQualification schema
      UserQualification:
        type: object
        properties:
          qualification:
            $ref: '#/components/schemas/Qualification'
          qualificationId:
            type: integer
          user:
            $ref: '#/components/schemas/User'
          userId:
            type: integer
      # Role schema
      Role:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          User:
            type: array
            items:
              $ref: '#/components/schemas/User'
      # ScheduledMaintenanceQualification schema
      ScheduledMaintenanceQualification:
        type: object
        properties:
          qualification:
            $ref: '#/components/schemas/Qualification'
          qualificationId:
            type: integer
          maintenance:
            $ref: '#/components/schemas/ScheduledMaintenance'
          maintenanceId:
            type: integer
      # SpecialMaintenanceQualification schema
      SpecialMaintenanceQualification:
        type: object
        properties:
          qualification:
            $ref: '#/components/schemas/Qualification'
          qualificationId:
            type: integer
          maintenance:
            $ref: '#/components/schemas/SpecialMaintenance'
          maintenanceId:
            type: integer
      # Task schema
      Task:
        type: object
        properties:
          id:
            type: integer
          scheduledMaintenanceId:
            type: integer
            nullable: true
          scheduledMaintenance:
            $ref: '#/components/schemas/ScheduledMaintenance'
            nullable: true
          specialMaintenanceId:
            type: integer
            nullable: true
          specialMaintenance:
            $ref: '#/components/schemas/SpecialMaintenance'
            nullable: true
          userId:
            type: integer
          user:
            $ref: '#/components/schemas/User'
          description:
            type: string
            nullable: false
          due:
            type: string
            format: date-time
            nullable: false
          createdAt:
            type: string
            format: date-time
            default: Auto-generated
          updatedAt:
            type: string
            format: date-time #updatedAt is missing!
            default: Auto-generated
          acceptedAt:
            type: string
            format: date-time
            nullable: true
          declinedAt:
            type: string
            format: date-time
            nullable: true
          startedAt:
            type: string
            format: date-time
            nullable: true
          finishedAt:
            type: string
            format: date-time
            nullable: true
          priorityId:
            type: number
            default: 3
          statusId:
            type: integer
            default: 1
          status:
            $ref: '#/components/schemas/Status'
          createdByUserId:
            type: integer
            nullable: false
          createdByUser:
            $ref: '#/components/schemas/User'
      # Priority schema
      Priority:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          priority:
            type: integer
          ScheduledMaintenance:
            type: array
            items:
              $ref: '#/components/schemas/ScheduledMaintenance'
          SpecialMaintenance:
            type: array
            items:
              $ref: '#/components/schemas/SpecialMaintenance'
      # Status schema
      Status:
        type: object
        properties:
          id:
            type: integer
            default: Auto-generated
          name:
            type: string
          Task:
            type: array
            items:
              $ref: '#/components/schemas/Task'

      Login:
        type: object
        properties:
          username:
            type: string
            nullable: false
          password:
            type: string
            nullable: false
      Logger:
        type: object
        properties:
          id:
            type: integer
          message:
            type: string
          time:
            type: string
            format: date-time
      # Error schema
      NotFound:
        type: object
        properties:
          status:
            type: integer
            default: 404
          message:
            type: string
            default: Not found with this id
      ServerError:
        type: object
        properties:
          status:
            type: integer
            default: 500
          message:
            type: string
            default: Error message

#      Post:
#        type: object
#        required:
#          - userId
#          - title
#          - body
#        properties:
#          id:
#            type: integer
#          userId:
#            type: integer
#          title:
#            type: string
#          body:
#            type: string
#        example:
#          id: 1
#          userId: 1
#          title: my title
#          body: my article
paths:
  /users:
    get:
      summary: Returns all users
      tags: [Users]
      responses:
        200:
          description: the list of the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'



  /users/{id}:
    get:
      summary: Returns a user by id
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by id
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The user was successfully deleted and the data of the deleted user is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: The user was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The user could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update a user by id
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/User'
            examples:    
              Example1:   
                value:
                  username: New username
              Example2:   
                value:
                  name: New name
                  username: New username
              Example3:   
                value:
                  name: New name
                  username: New username
                  password: New password
              Example4:   
                value:
                  name: New name
                  username: New username
                  password: New password
                  userId: 1
      responses:
        200:
          description: The user was successfully updated and the data of the updated user is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: The user was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The user could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'



  /user:
    post:
      summary: Adds a new user
      tags: [Users]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/User'   
            examples:    
              Jessica:   
                value:
                  name: Jessica Smith
                  username: jessica_s
                  password: passw1234
                  roleId: 1
                  active: true
              Ron:       
                value:
                  name: Ron Stewart
                  username: ron_s
                  password: secret987
                  roleId: 1
                  active: true
      responses:
        200:
          description: The user was successfully created and the data of the created user is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: The user could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /login:
    post:
      summary: Login
      tags: [Users]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Login'   
            examples:    
              Working example:   
                value:
                  username: admin
                  password: admin
              Bad password:       
                value:
                  username: admin
                  password: password
              Not found example:
                value:
                  username: pityu
                  password: notapassword
      responses:
        '200':
          description: Successfully logged in
        404:
          description: Not found
        401:
          description: Wrong password

# QUALIFICATIONS
  /qualifications:
    get:
      summary: Returns all qualifications
      tags: [Qualifications]
      responses:
        200:
          description: the list of the qualifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Qualification'

  /qualification/{id}:
    get:
      summary: Returns a qualification by id
      tags: [Qualifications]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a qualification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Qualification'
    delete:
      summary: Delete a qualification by id
      tags: [Qualifications]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The qualification was successfully deleted and the data of the deleted qualification is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Qualification'
        500:
          description: The qualification could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update a qualification by id
      tags: [Qualifications]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Qualification'
            examples:
              Example1:   
                value:
                  name: New name
      responses:
        200:
          description: The qualification was successfully updated and the data of the updated qualification is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Qualification'
        500:
          description: The qualification could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /qualification:
    post:
      summary: Adds a new qualification
      tags: [Qualifications]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Qualification'   
            examples:    
              Example1:   
                value:
                  name: New name
      responses:
        200:
          description: The qualification was successfully created and the data of the created category is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Qualification'
        500:
          description: The qualification could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

      
# CATEGORIES
  /categories:
    get:
      summary: Returns all categories
      tags: [Categories]
      responses:
        200:
          description: the list of the categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  
  /categories/details:
    get:
      summary: Returns all categories with details
      tags: [Categories]
      responses:
        200:
          description: the list of the categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        
  /categories/{id}:
    get:
      summary: Returns a category by id
      tags: [Categories]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      summary: Delete a category by id
      tags: [Categories]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The category was successfully deleted and the data of the deleted category is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        404:
          description: The category was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The category could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update a category by id
      tags: [Categories]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Category'
            examples:    
              Example1:   
                value:
                  name: New name
              Example2:   
                value:
                  name: New name
                  parentId: 1
      responses:
        200:
          description: The category was successfully updated and the data of the updated category is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        404:
          description: The category was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The category could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /categories/{id}/details:
    get:
      summary: Returns a category by id
      tags: [Categories]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /category:
    post:
      summary: Adds a new category
      tags: [Categories]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Category'   
            examples:    
              Example1:   
                value:
                  name: New name
                  parentId: 1
              Example2:   
                value:
                  name: New name2
                  parentId: null
      responses:
        200:
          description: The category was successfully created and the data of the created category is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        500:
          description: The category could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

# DEVICES
  /devices:
    get:
      summary: Returns all devices
      tags: [Devices]
      responses:
        200:
          description: the list of the devices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'

  /device/{id}:
    get:
      summary: Returns a device by id
      tags: [Devices]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    delete:
      summary: Delete a device by id
      tags: [Devices]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The device was successfully deleted and the data of the deleted device is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        404:
          description: The device was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The device could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update a device by id
      tags: [Devices]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Device'
            examples:    
              Example1:   
                value:
                  name: New name
              Example2:   
                value:
                  name: New name
                  description: null
              Example3:   
                value:
                  name: New name
                  description: null
                  identifier: NEW001
              Example4:   
                value:
                  name: New name
                  description: null
                  identifier: NEW002
                  locationId: 1
              Example5:   
                value:
                  name: New name
                  description: null
                  identifier: NEW001
                  locationId: 1
                  categoryId: 1
      responses:
        200:
          description: The device was successfully updated and the data of the updated device is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        404:
          description: The category was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The device could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /device:
    post:
      summary: Adds a new device
      tags: [Devices]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Device'   
            examples:    
              Example1:   
                value:
                  name: New name
                  description: New description
                  identifier: NEW001
                  locationId: 1
                  categoryId: 1
              Example2:   
                value:
                  name: New name
                  description: null
                  identifier: NEW001
                  locationId: 1
                  categoryId: 1
      responses:
        200:
          description: The device was successfully created and the data of the created device is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        500:
          description: The device could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  # SCHEDULED_MAINTENANCES
  /scheduledMaintenances:
    get:
      summary: Returns all scheduledMaintenances
      tags: [ScheduledMaintenances]
      responses:
        200:
          description: the list of the scheduledMaintenances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledMaintenance'
  
  /scheduledMaintenances/details:
    get:
      summary: Returns all scheduledMaintenances with details
      tags: [ScheduledMaintenances]
      responses:
        200:
          description: the list of the scheduledMaintenances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledMaintenance'
        
  /scheduledMaintenance/{id}:
    get:
      summary: Returns a maintenance by id
      tags: [ScheduledMaintenances]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduledMaintenance'
    delete:
      summary: Delete a maintenance by id
      tags: [ScheduledMaintenances]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The maintenance was successfully deleted and the data of the deleted maintenance is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledMaintenance'
        404:
          description: The maintetnance was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The maintenance could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update a maintenance by id
      tags: [ScheduledMaintenances]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/ScheduledMaintenance'
            examples:    
              Example1:   
                value:
                  name: New name
              Example2:   
                value:
                  name: New name
                  normaInMinutes: 50
              Example3:   
                value:
                  name: New name
                  normaInMinutes: 50
                  lastMaintenance: null
              Example4:   
                value:
                  name: New name
                  normaInMinutes: 50
                  lastMaintenance: null
                  periodId: 1
              Example5:   
                value:
                  name: New name
                  normaInMinutes: 50
                  lastMaintenance: null
                  periodId: 1
                  categoryId: 1
              Example6:   
                value:
                  name: New name
                  normaInMinutes: 50
                  lastMaintenance: null
                  periodId: 1
                  categoryId: 1
                  priorityId: 1
      responses:
        200:
          description: The maintenance was successfully updated and the data of the updated maintenance is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledMaintenance'
        404:
          description: The maintenance was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The maintenance could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /scheduledMaintenance/{id}/details:
    get:
      summary: Returns a maintenance by id
      tags: [ScheduledMaintenances]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduledMaintenance'

  /scheduledMaintenance:
    post:
      summary: Adds a new maintenance
      tags: [ScheduledMaintenances]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/ScheduledMaintenance'   
            examples:    
              Example1:   
                value:
                  name: New name
                  normaInMinutes: 50
                  lastMaintenance: null
                  periodId: 1
                  categoryId: 1
      responses:
        200:
          description: The maintenance was successfully created and the data of the created maintenance is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledMaintenance'
        500:
          description: The maintenance could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  # SPECIAL_MAINTENANCES
  /specialMaintenances:
    get:
      summary: Returns all specialMaintenances
      tags: [SpecialMaintenances]
      responses:
        200:
          description: the list of the specialMaintenances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecialMaintenance'
  
  /specialMaintenances/details:
    get:
      summary: Returns all specialMaintenances with details
      tags: [SpecialMaintenances]
      responses:
        200:
          description: the list of the specialMaintenances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecialMaintenance'
        
  /specialMaintenances/{id}:
    get:
      summary: Returns a maintenance by id
      tags: [SpecialMaintenances]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialMaintenance'
    delete:
      summary: Delete a maintenance by id
      tags: [SpecialMaintenances]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The maintenance was successfully deleted and the data of the deleted maintenance is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecialMaintenance'
        404:
          description: The maintetnance was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The maintenance could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update a maintenance by id
      tags: [SpecialMaintenances]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/SpecialMaintenance'
            examples:    
              Example1:   
                value:
                  name: New name
              Example2:   
                value:
                  name: New name
                  description: null
              Example3:   
                value:
                  name: New name
                  description: null
                  normaInMinutes: 50
              Example4:   
                value:
                  name: New name
                  description: null
                  normaInMinutes: 50
                  malfunctionDate: '2021-02-24T18:17:29.558Z'
              Example5:   
                value:
                  name: New name
                  description: null
                  normaInMinutes: 50
                  malfunctionDate: '2021-02-24T18:17:29.558Z'
                  deviceId: 1
              Example6:   
                value:
                  name: New name
                  description: null
                  normaInMinutes: 50
                  malfunctionDate: '2021-02-24T18:17:29.558Z'
                  deviceId: 1
                  priorityId: 1
      responses:
        200:
          description: The maintenance was successfully updated and the data of the updated maintenance is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecialMaintenance'
        404:
          description: The maintenance was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The maintenance could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /specialMaintenances/{id}/details:
    get:
      summary: Returns a maintenance by id
      tags: [SpecialMaintenances]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialMaintenance'

  /specialMaintenance:
    post:
      summary: Adds a new maintenance
      tags: [SpecialMaintenances]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/SpecialMaintenance'   
            examples:    
              Example1:   
                value:
                  name: New name
                  description: null
                  normaInMinutes: 50
                  deviceId: 1
                  priorityId: 1
              Example2:   
                value:
                  name: New name
                  description: New description
                  normaInMinutes: 50
                  malfunctionDate: '2021-02-24T18:17:29.558Z'
                  deviceId: 1
                  priorityId: 1
      responses:
        200:
          description: The maintenance was successfully created and the data of the created maintenance is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecialMaintenance'
        500:
          description: The maintenance could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

# SCHEDULEDMAINTENANCEQUALIFICATIONS
  /scheduledMaintenanceQualifications:
    get:
      summary: Returns all ScheduledMaintenanceQualifications
      tags: [ScheduledMaintenanceQualifications]
      responses:
        200:
          description: the list of the ScheduledMaintenanceQualifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledMaintenanceQualification'
  
  /scheduledMaintenanceQualification/{maintenanceId}/{qualificationId}:
    get:
      summary: Returns a ScheduledMaintenanceQualification by id
      tags: [ScheduledMaintenanceQualifications]
      parameters:
        - in: path
          name: maintenanceId
          schema:
            type: integer
          required: true
        - in: path
          name: qualificationId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Contents of a ScheduledMaintenanceQualification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduledMaintenanceQualification'
    delete:
      summary: Delete a ScheduledMaintenanceQualification by id
      tags: [ScheduledMaintenanceQualifications]
      parameters:
        - in: path
          name: maintenanceId
          schema:
            type: integer
          required: true
        - in: path
          name: qualificationId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The ScheduledMaintenanceQualification was successfully deleted and the data of the deleted ScheduledMaintenanceQualification is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledMaintenanceQualification'
        404:
          description: The ScheduledMaintenanceQualification was not found with these ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The ScheduledMaintenanceQualification could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update a ScheduledMaintenanceQualification by id
      tags: [ScheduledMaintenanceQualifications]
      parameters:
        - in: path
          name: maintenanceId
          schema:
            type: integer
          required: true
        - in: path
          name: qualificationId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/ScheduledMaintenanceQualification'
            examples:    
              Example1:   
                value:
                  maintenanceId: 1
              Example2:   
                value:
                  qualificationId: 1
              Example3:   
                value:
                  maintenanceId: 1
                  qualificationId: 1
      responses:
        200:
          description: The ScheduledMaintenanceQualification was successfully updated and the data of the updated ScheduledMaintenanceQualification is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledMaintenanceQualification'
        404:
          description: The ScheduledMaintenanceQualification was not found with these ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The ScheduledMaintenanceQualification could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /scheduledMaintenanceQualification:
    post:
      summary: Adds a new ScheduledMaintenanceQualification
      tags: [ScheduledMaintenanceQualifications]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/ScheduledMaintenanceQualification'   
            examples:    
              Example1:   
                value:
                  maintenanceId: 1
                  qualificationId: 1
      responses:
        200:
          description: The ScheduledMaintenanceQualification was successfully created and the data of the created ScheduledMaintenanceQualification is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledMaintenanceQualification'
        500:
          description: The ScheduledMaintenanceQualification could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

# SPECIALMAINTENANCEQUALIFICATIONS
  /specialMaintenanceQualifications:
    get:
      summary: Returns all SpecialMaintenanceQualifications
      tags: [SpecialMaintenanceQualifications]
      responses:
        200:
          description: the list of the SpecialMaintenanceQualifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecialMaintenanceQualification'
  
  /specialMaintenanceQualification/{maintenanceId}/{qualificationId}:
    get:
      summary: Returns a SpecialMaintenanceQualification by id
      tags: [SpecialMaintenanceQualifications]
      parameters:
        - in: path
          name: maintenanceId
          schema:
            type: integer
          required: true
        - in: path
          name: qualificationId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Contents of a SpecialMaintenanceQualification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialMaintenanceQualification'
    delete:
      summary: Delete a SpecialMaintenanceQualification by id
      tags: [SpecialMaintenanceQualifications]
      parameters:
        - in: path
          name: maintenanceId
          schema:
            type: integer
          required: true
        - in: path
          name: qualificationId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The SpecialMaintenanceQualification was successfully deleted and the data of the deleted SpecialMaintenanceQualification is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecialMaintenanceQualification'
        404:
          description: The SpecialMaintenanceQualification was not found with these ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The SpecialMaintenanceQualification could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update a SpecialMaintenanceQualification by id
      tags: [SpecialMaintenanceQualifications]
      parameters:
        - in: path
          name: maintenanceId
          schema:
            type: integer
          required: true
        - in: path
          name: qualificationId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/SpecialMaintenanceQualification'
            examples:    
              Example1:   
                value:
                  maintenanceId: 1
              Example2:   
                value:
                  qualificationId: 1
              Example3:   
                value:
                  maintenanceId: 1
                  qualificationId: 1
      responses:
        200:
          description: The SpecialMaintenanceQualification was successfully updated and the data of the updated SpecialMaintenanceQualification is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecialMaintenanceQualification'
        404:
          description: The SpecialMaintenanceQualification was not found with these ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The SpecialMaintenanceQualification could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /specialMaintenanceQualification:
    post:
      summary: Adds a new SpecialMaintenanceQualification
      tags: [SpecialMaintenanceQualifications]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/SpecialMaintenanceQualification'   
            examples:    
              Example1:   
                value:
                  maintenanceId: 1
                  qualificationId: 1
      responses:
        200:
          description: The SpecialMaintenanceQualification was successfully created and the data of the created SpecialMaintenanceQualification is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecialMaintenanceQualification'
        500:
          description: The SpecialMaintenanceQualification could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'


# INSTRUCTIONS
  /instructions:
    get:
      summary: Returns all instructions
      tags: [Instructions]
      responses:
        200:
          description: the list of the instructions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instruction'
  
  /instruction/{id}:
    get:
      summary: Returns an instruction by id
      tags: [Instructions]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Contents of an Instruction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instruction'
    delete:
      summary: Delete an instruction by id
      tags: [Instructions]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The instruction was successfully deleted and the data of the deleted instruction is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instruction'
        404:
          description: The instruction was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The instruction could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update an Instruction by id
      tags: [Instructions]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Instruction'
            examples:    
              Example1:   
                value:
                  title: New title
              Example2:   
                value:
                  title: New title
                  body: New Body
              Example3:   
                value:
                  title: New title
                  body: null
                  scheduledMaintenanceId: 1
                  specialMaintenanceId: null
              Example4:   
                value:
                  title: New title
                  body: New body
                  scheduledMaintenanceId: null
                  specialMaintenanceId: 1
      responses:
        200:
          description: The instruction was successfully updated and the data of the updated instruction is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instruction'
        404:
          description: The instruction was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The instruction could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /instruction:
    post:
      summary: Adds a new instruction
      tags: [Instructions]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Instruction'   
            examples:    
              Example1:   
                value:
                  title: New title
                  body: New body
                  scheduledMaintenanceId: null
                  specialMaintenanceId: 1
              Example2:   
                value:
                  title: New title
                  body: null
                  scheduledMaintenanceId: 1
                  specialMaintenanceId: null
      responses:
        200:
          description: The instruction was successfully created and the data of the created instruction is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instruction'
        500:
          description: The instruction could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
# USERQUALIFICATIONS
  /userQualifications:
    get:
      summary: Returns all UserQualifications
      tags: [UserQualifications]
      responses:
        200:
          description: the list of the UserQualifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserQualification'
  
  /userQualification/{userId}/{qualificationId}:
    get:
      summary: Returns a UserQualification by id
      tags: [UserQualifications]
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
        - in: path
          name: qualificationId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Contents of a UserQualification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQualification'
    delete:
      summary: Delete a UserQualification by id
      tags: [UserQualifications]
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
        - in: path
          name: qualificationId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The UserQualification was successfully deleted and the data of the deleted UserQualification is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserQualification'
        404:
          description: The UserQualification was not found with these ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The UserQualification could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update a UserQualification by id
      tags: [UserQualifications]
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
        - in: path
          name: qualificationId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/UserQualification'
            examples:    
              Example1:   
                value:
                  userId: 1
              Example2:   
                value:
                  qualificationId: 1
              Example3:   
                value:
                  userId: 1
                  qualificationId: 1
      responses:
        200:
          description: The UserQualification was successfully updated and the data of the updated UserQualification is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserQualification'
        404:
          description: The UserQualification was not found with these ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The UserQualification could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /UserQualification:
    post:
      summary: Adds a new UserQualification
      tags: [UserQualifications]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/UserQualification'   
            examples:    
              Example1:   
                value:
                  userId: 1
                  qualificationId: 1
      responses:
        200:
          description: The UserQualification was successfully created and the data of the created UserQualification is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserQualification'
        500:
          description: The UserQualification could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
# TASKS
  /tasks:
    get:
      summary: Returns all tasks
      tags: [Tasks]
      responses:
        200:
          description: the list of the tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  
  /tasks/details:
    get:
      summary: Returns all tasks with details
      tags: [Tasks]
      responses:
        200:
          description: the list of the tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        
  /tasks/{id}:
    get:
      summary: Returns all tasks belonging to the user with the UserId
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a task
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

  /tasks/{id}/details:
    get:
      summary: Returns all tasks belonging to the user with the UserId, with details
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a task
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

  /task/{id}:
    get:
      summary: Returns a task by id
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /task/{id}/details:
    get:
      summary: Returns a task by id
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Details of a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /task:
    post:
      summary: Adds a new task
      tags: [Tasks]
      requestBody:
        content:
          application/json:     
            schema:             
              type: object
              properties:
                userId: 
                  type: integer
                  nullable: false
                description:
                  type: string
                  nullable: true
                due: 
                  type: string
                  format: date-time
                  nullable: false
                scheduledMaintenanceId:
                  type: integer
                  nullable: true
                specialMaintenanceId:
                  type: integer
                  nullable: true
                createdByUserId:
                  type: integer
                  nullable: false
            examples:    
              Example1:   
                value:
                  userId: 1,
                  description: null,
                  due: '2022-03-07T23:48:21.562Z'
                  scheduledMaintenanceId: 1
                  createdByUserId: 3
              Example2:   
                value:
                  userId: 1,
                  description: null,
                  due: '2022-03-07T23:48:21.562Z'
                  specialMaintenanceId: 1
                  createdByUserId: 3
                  
      responses:
        200:
          description: The task was successfully created and the data of the created task is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        400:
          description: The task could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
        500:
          description: ServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /task/{id}/accept:
    post:
      summary: Accept the task
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              type: object
              properties:
                userId:
                  type: integer   
            examples:    
              Example1:   
                value:
                  userId: 1
                  
      responses:
        200:
          description: The task was successfully accepted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /task/{id}/decline:
    post:
      summary: Decline the task
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              type: object
              properties:
                userId:
                  type: integer  
                description:
                  type: string
                  nullable: false
            examples:    
              Example1:   
                value:
                  userId: 1
                  description: reason.........
      responses:
        200:
          description: The task was successfully declined
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /task/{id}/start:
    post:
      summary: Start the task
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              type: object
              properties:
                userId:
                  type: integer  
            examples:    
              Example1:   
                value:
                  userId: 1
                  
      responses:
        200:
          description: The task was successfully started
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /task/{id}/finish:
    post:
      summary: Finish the task
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              type: object
              properties:
                userId:
                  type: integer
            examples:    
              Example1:   
                value:
                  userId: 1
                  
      responses:
        200:
          description: The task was successfully finished
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /task/{id}/assignToUser:
    post:
      summary: Assign a task to a user
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              type: object
              properties:
                operatorId:
                  type: integer
                userId:
                  type: integer
            examples:    
              Example1:   
                value:
                  operatorId: 3
                  userId: 1
                  
      responses:
        200:
          description: The task was successfully assigned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
# BUILDINGS
  /buildings:
    get:
      summary: Returns all buildings
      tags: [Buildings]
      responses:
        200:
          description: the list of the buildings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
  /buildings/details:
    get:
      summary: Returns all buildings with details
      tags: [Buildings]
      responses:
        200:
          description: the list of the buildings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
  /building/{id}:
    get:
      summary: Returns a building by id
      tags: [Buildings]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Contents of a Building
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
    delete:
      summary: Delete a building by id
      tags: [Buildings]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The building was successfully deleted and the data of the deleted building is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
        404:
          description: The building was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The building could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update a Building by id
      tags: [Buildings]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Building'
            examples:    
              Example1:   
                value:
                  name: New name
      responses:
        200:
          description: The building was successfully updated and the data of the updated building is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
        404:
          description: The building was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The building could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /building/{id}/details:
    get:
      summary: Returns a building by id with details
      tags: [Buildings]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Contents of a Building
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
  /building:
    post:
      summary: Adds a new building
      tags: [Buildings]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Building'
            examples:    
              Example1:   
                value:
                  name: New name
      responses:
        200:
          description: The building was successfully created and the data of the created building is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
        500:
          description: The building could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
# LOCATIONS
  /locations:
    get:
      summary: Returns all locations
      tags: [Locations]
      responses:
        200:
          description: the list of the locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
  /locations/details:
    get:
      summary: Returns all locations with details
      tags: [Locations]
      responses:
        200:
          description: the list of the locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
  /location/{id}:
    get:
      summary: Returns a location by id
      tags: [Locations]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Contents of a location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
    delete:
      summary: Delete a location by id
      tags: [Locations]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The location was successfully deleted and the data of the deleted location is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        404:
          description: The location was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The location could not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      summary: Update a location by id
      tags: [Locations]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Location'
            examples:    
              Example1:   
                value:
                  name: New name
              Example2:   
                value:
                  buildingId: 1
              Example3:   
                value:
                  name: New name
                  buildingId: 1
      responses:
        200:
          description: The location was successfully updated and the data of the updated location is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        404:
          description: The location was not found with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        500:
          description: The location could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /location/{id}/details:
    get:
      summary: Returns a location by id with details
      tags: [Locations]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Contents of a location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
  /location:
    post:
      summary: Adds a new location
      tags: [Locations]
      requestBody:
        content:
          application/json:     
            schema:             
              $ref: '#/components/schemas/Location'
            examples:    
              Example1:   
                value:
                  name: New name
                  buildingId: 1
      responses:
        200:
          description: The location was successfully created and the data of the created location is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        500:
          description: The location could not be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
# LOGGER
  /logs:
    get:
      summary: Returns all logs
      tags: [Logger]
      responses:
        200:
          description: the list of the logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Logger'

# STATUS
  /status:
    get:
      summary: Returns all status
      tags: [Status]
      responses:
        200:
          description: the list of the status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'

  /status/details:
    get:
      summary: Returns all status with details
      tags: [Status]
      responses:
        200:
          description: the list of the status with details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'

# PERIOD
  /period:
    get:
      summary: Returns all period
      tags: [Period]
      responses:
        200:
          description: the list of the period
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Period'

  /period/details:
    get:
      summary: Returns all period with details
      tags: [Period]
      responses:
        200:
          description: the list of the period with details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Period'

# priority
  /priority:
    get:
      summary: Returns all priority
      tags: [Priority]
      responses:
        200:
          description: the list of the priority
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Priority'

# roles
  /roles:
    get:
      summary: Returns all roles
      tags: [Roles]
      responses:
        200:
          description: the list of the roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'